services:
  - type: worker
    name: render-deploy-example-worker
    region: oregon
    env: python
    rootDir: backend
    buildCommand: "pip install -r requirements.txt"
    startCommand: "celery --app worker.tasks worker --loglevel info --concurrency 1"
    autoDeploy: false
    envVars:
      - key: CELERY_BROKER_URL
        fromService:
          name: celery-redis
          type: redis
          property: connectionString
  - type: web
    name: render-deploy-example-app
    region: oregon
    env: python
    rootDir: backend
    buildCommand: "pip install -r requirements.txt"
    startCommand: "gunicorn app:app"
    autoDeploy: false
    domains:
      - stack-api.corbett.ai
    envVars:
      - key: CELERY_BROKER_URL
        fromService:
          name: celery-redis
          type: redis
          property: connectionString
  - type: web
    name: render-deploy-example-static-web
    env: static
    rootDir: webapp
    buildCommand: yarn; yarn build; yarn generate
    startCommand: yarn start
    domains:
      - stack.corbett.ai
  - type: redis
    name: celery-redis
    region: oregon
    plan: starter # we choose a plan with persistence to ensure tasks are not lost upon restart
    maxmemoryPolicy: noeviction # recommended policy for queues
    ipAllowList: [] # only allow internal connections